syntax = "proto3";
package ET;

//ResponseType M2C_TestResponse
message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	string request = 1;
}

message M2C_TestResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string response = 1;
}

//ResponseType Actor_TransferResponse
message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	int32 MapIndex = 1;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType G2C_EnterMap
message C2G_EnterMap // IRequest
{
	int32 RpcId = 1;
}

message G2C_EnterMap // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	// 自己unitId
	int64 MyId = 4;
}

message MoveInfo
{
	repeated float X = 1;
	repeated float Y = 2;
	repeated float Z = 3;

	float A = 4;
	float B = 5;
	float C = 6;
	float W = 7;
	int32 TurnSpeed = 8;
}

message UnitInfo
{
	int64 UnitId = 1;
	int32 ConfigId = 2;
	int32 Type = 3;
	float X = 4;
	float Y = 5;
	float Z = 6;
	float ForwardX = 7;
	float ForwardY = 8;
	float ForwardZ = 9;
	repeated int32 Ks = 10;
	repeated int64 Vs = 11;
	MoveInfo MoveInfo = 12;
}

message M2C_CreateUnits // IActorMessage
{
	repeated UnitInfo Units = 2;
}

message M2C_CreateMyUnit // IActorMessage
{
	UnitInfo Unit = 1;
}

message M2C_StartSceneChange // IActorMessage
{
	int64 SceneInstanceId = 1;
	string SceneName = 2;	
}

message M2C_RemoveUnits // IActorMessage
{
	repeated int64 Units = 2;
}

message C2M_PathfindingResult // IActorLocationMessage
{
	int32 RpcId = 90;

	float X = 1;
	float Y = 2;
	float Z = 3;
}

message C2M_Stop // IActorLocationMessage
{
	int32 RpcId = 90;
}

message M2C_PathfindingResult // IActorMessage
{
	int64 Id = 1;

	float X = 2;
	float Y = 3;
	float Z = 4;

	repeated float Xs = 5;
	repeated float Ys = 6;
	repeated float Zs = 7;
}

message M2C_Stop // IActorMessage
{
	int32 Error = 1;

	int64 Id = 2;
	float X = 3;
	float Y = 4;
	float Z = 5;

	float A = 6;
	float B = 7;
	float C = 8;
	float W = 9;
}

//ResponseType G2C_Ping
message C2G_Ping // IRequest
{
	int32 RpcId = 90;
}

message G2C_Ping // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;

	int64 Time = 1;
}


message G2C_Test // IMessage
{
}

//ResponseType M2C_Reload
message C2M_Reload // IRequest
{
	int32 RpcId = 90;
	string Account = 1;
	string Password = 2;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType R2C_Login
message C2R_Login // IRequest
{
	int32 RpcId = 90;
	string  Account = 1;  // 帐号
	string  Password = 2;  // 密码
}

message R2C_Login // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string Address = 1;
	int64 Key = 2;
	int64 GateId = 3;
}

//ResponseType G2C_LoginGate
message C2G_LoginGate // IRequest
{
	int32 RpcId = 90;
	int64 Key = 1;  // 帐号
	int64 GateId = 2;
}

message G2C_LoginGate // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int64 PlayerId = 1;
}

message G2C_TestHotfixMessage // IMessage
{
	string Info = 1;
}

//ResponseType M2C_TestRobotCase
message C2M_TestRobotCase // IActorLocationRequest
{
	int32 RpcId = 90;
	int32 N = 1;
}

message M2C_TestRobotCase // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int32 N = 1;
}

//ResponseType M2C_TransferMap
message C2M_TransferMap // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_TransferMap // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}
//ResponseType A2C_LoginAccount
message C2A_LoginAccount // IRequest
{
	int32 RpcId = 90;
	string AccountName = 1;
	string Password = 2;
}

message A2C_LoginAccount // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string Token = 1;
	int64 AccountId = 2;
}
message A2C_Disconnect //IMessage
{
	int32 Error = 1;
}

message ServerInfoProto
{
	int32 Id = 1;
	int32 Status = 2;
	string ServerName = 3;
}

//ResponseType A2C_GetServerInfos
message C2A_GetServerInfos // IRequest
{
	int32 RpcId = 90;
	string Token = 1;
	int64 AccountId = 2;
}

message A2C_GetServerInfos // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	repeated ServerInfoProto ServerInfoList = 1;
}

message RoleInfoProto
{
	int64 Id = 1;
	string Name = 2;
	int32 State = 3;
	int64 AccountId = 4;
	int64 CreateTime = 5;
	int64 LastLoginTime = 6;
	int32 ServerId = 7;
}

//ResponseType A2C_CreateRole
message C2A_CreteRole // IRequest
{
	int32 RpcId = 90;
	string Token = 1;
	int64 AccountId = 2;
	string Name = 3;
	int32 ServerId = 4;
}

message A2C_CreateRole // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	RoleInfoProto RoleInfo = 1;
}

//ResponseType A2C_GetRoleInfos
message C2A_GetRoleInfos // IRequest
{
	int32 RpcId = 90;
	string Token = 1;
	int64 AccountId = 2;
	int32 ServerId = 3;
}

message A2C_GetRoleInfos // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
   	repeated RoleInfoProto RoleInfo = 1;
}

//ResponseType A2C_DeleteRole
message C2A_DeleteRole // IRequest
{
	int32 RpcId = 90;
	string Token = 1;
	int64 AccountId = 2;
	string RoleName = 3;
	int32 ServerId = 4;
}

message A2C_DeleteRole // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
   	int64 DeleteRoleInfoId = 1;
}

//ResponseType A2C_GetRealmKey
message C2A_GetRealmKey //IRequest
{
	int32 RpcId = 90;
	string Token = 1;
	int32 ServerId = 2;
	int64 AccountId = 3;
}
message A2C_GetRealmKey //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string RealmKey = 1;
	string RealmAddress = 2;
}
//ResponseType R2C_LoginRealm
message C2R_LoginRealm // IRequest
{
	 int32 RpcId = 90;
	 int64 AccountId = 1;
	 string RealmTokenKey = 2;
}
message R2C_LoginRealm // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string GateSessionKey = 1;
	string GateAddress = 2;
}
//ResponseType G2C_LoginGameGate
message C2G_LoginGameGate //IRequest
{
	int32 RpcId = 90;
	string Key = 1;
	int64 RoleId = 2;
	int64 AccountId = 3;
	int64 ServerId = 4;
}
message G2C_LoginGameGate //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int64 PlayerId = 1;
}
//ResponseType G2C_EnterGame
message C2G_EnterGame //IRequest
{
	int32 RpcId = 90;
}
message G2C_EnterGame //IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	//unitId
	int64 MyId = 1;
}

//ResponseType M2C_TestUnitNumeric
message C2M_TestUnitNumeric //IActorLocationRequest
{
	int32 RpcId = 90;
}

message M2C_TestUnitNumeric //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message M2C_NoticeUnitNumeric //IActorMessage
{
	int64 unitId = 1;
	int32 NumericType = 2;
	int64 NewValue = 3;
}
//ResponseType M2C_AddAttributePoint
message C2M_AddAttributePoint //IActorLocationRequest
{
	int32 RpcId = 90;
	int32 NumericType = 1;
}
message M2C_AddAttributePoint //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType M2C_EnterMatch
message C2M_EnterMatch //IActorLocationRequest
{
	int32 RpcId = 90;
	int32 MatchMode = 1;
	int32 LevelId = 2;
}
message M2C_EnterMatch //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int32 MatchMode = 1;
}
//ResponseType M2C_ExitMatch
message C2M_ExitMatch //IActorLocationRequest
{
	int32 RpcId = 90;
	int32 MatchMode = 1;
}
message M2C_ExitMatch //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}
//ResponseType G2C_GetReadyGame
message C2G_GetReadyGame // IActorLocationRequest
{
	int32 RpcId = 90;
}

message G2C_GetReadyGame // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}
//ResponseType G2C_CancelReadyGame
message C2G_CancelReadyGame // IActorLocationRequest
{
	int32 RpcId = 90;
}

message G2C_CancelReadyGame // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}
message C2G_AddGameRoom //IActorLocationMessage
{
	int32 RpcId = 90;
}
message G2C_StartGame //IActorMessage
{
	repeated int32 chance = 1;
}

//ResponseType G2C_CreateTowerResponse
message C2G_CreateTowerRequest //IActorLocationRequest
{
	int32 RpcId = 90;
	int32 RoomIndex = 1;
	int32 TowerConfigId = 2;
	float TowerPX = 3;
	float TowerPY = 4;
	int64 TowerId = 5;
}
message G2C_CreateTowerResponse //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message G2C_ReturnCreateTowerMessage // IActorMessage
{
	int32 Position = 1;
	int32 TowerConfigId = 2;
	float TowerPX = 3;
	float TowerPY = 4;
	int64 TowerId = 5;
}

//ResponseType G2C_CreateMonsterResponse
message C2G_CreateMonsterRequest //IActorLocationRequest
{
	int32 RpcId = 90;
	int32 RoomIndex = 1;
	int32 MonsterId = 2;
	int32 Position = 3;
}
message G2C_CreateMonsterResponse //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message G2C_ReturnCreateMonsterMessage // IActorMessage
{
	int32 MonsterId = 1;
	int32 Position = 2;
}

//ResponseType G2C_WinGame
message C2G_WinGame //IActorLocationRequest
{
	int32 RpcId = 90;
	int32 RoomIndex = 1;
	int32 Position = 2;
	int32 BaseHp = 3;
}
message G2C_WinGame //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message G2C_ReturnWinGame // IActorMessage
{
	int IsWin = 1;
	repeated int32 WinItemId = 2;
	repeated int32 WinItemNumber = 3;
	repeated int32 FailItemId = 4;
	repeated int32 FailItemNumber = 5;
}

//ResponseType G2C_ExitGameAndEnterMainHome
message C2G_ExitGameAndEnterMainHome //IActorLocationRequest
{
	int32 RpcId = 90;
}
message G2C_ExitGameAndEnterMainHome //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType G2C_DeleteTower
message C2G_DeleteTower //IActorLocationRequest
{
	int32 RpcId = 90;
	int32 RoomIndex = 1;
	int64 TowerId = 2;
}
message G2C_DeleteTower //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}
message G2C_ReturnDeleteTower // IActorMessage
{
	int64 TowerId = 1;
}

message OptionEvent
{
	int32 position = 1;
	int32 optType = 2;
	int32 TowerConfigId = 3;
	int64 TowerId = 4;
	int64 NewTowerId = 5;
	float TowerX = 6;
	float TowerY = 7;
	int32 MonsterConfigId = 8;
	int64 MonsterId = 9;
	repeated int32 SkillIds = 10;
}
message FrameOpts 
{
	int32 frameid = 1;
	repeated OptionEvent opts = 2;
}
message NextFrameOpts //IActorLocationMessage
{
	int32 RpcId = 90;
	int32 frameid = 1;
	repeated OptionEvent opts = 2;
}

message LogicFrame //IActorMessage
{
    int32 frameid = 1;
	repeated FrameOpts unsync_frames = 2;
}

message UpLoadFrameId //IActorLocationMessage
{
	int32 RpcId = 90;
	int32 frameid = 1;
}


message ItemInfo
{
	int64 ItemUid = 1;
	int32 ItemConfigId = 2;
	int32 ItemNumber = 3;
}
message G2C_ItemUpdateOpInfo //IActorMessage
{
	int32 RpcId = 90;
	ItemInfo ItemInfo = 1;
	int32 Op = 2;
	int32 ContainerType = 3;
}
message G2C_AllItemsList //IActorMessage
{
	int32 RpcId = 90;
	repeated ItemInfo ItemInfoList = 1;
	int32 ContainerType = 2;
}
message C2G_OpItem //IActorLocationMessage
{
	int32 RpcId = 90;

	int32 OpType = 1;
	int64 ItemUid = 2;
	int32 ItemNumber = 3;
}



message FightItemInfo
{
	int64 FightItemUid = 1;
	int32 FightItemConfigId = 2;
	int32 Upgrading = 3;
	repeated int32 AddedTalent = 4;
}
message G2C_FightItemUpdateOpInfo //IActorMessage
{
	int32 RpcId = 90;
	FightItemInfo FightItemInfo = 1;
	int32 Op = 2;
}
message G2C_AllFightItemsList //IActorMessage
{
	int32 RpcId = 90;
	repeated FightItemInfo FightItemInfoList = 1;
}
message C2G_OpFightItem //IActorLocationMessage
{
	int32 RpcId = 90;
	int32 OpType = 1;
	int64 FightItemUid = 2;
	int32 TalentConfigId = 3;
}

//ResponseType G2C_ContinueGame
message C2G_ContinueGame //IActorLocationRequest
{
	int32 RpcId = 90;
	int32 LevelId = 1;
	int32 MatchMode = 2;
}
message G2C_ContinueGame //IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message G2C_UpdateLevelData //IActorMessage
{
	int32 RpcId = 90;
	repeated int32 LevelData = 1;
}